{"version":3,"sources":["blocks/DefaultComponent/default-component.tsx","HOCs/content-data-component.tsx","HOCs/content-area-item.tsx","utils/componentRegister.tsx","utils/component-renderer.tsx","blocks/ContainerBlock/content-api.ts","blocks/ContainerBlock/contentarea-slice.ts","app/store.ts","common-root-component.tsx","index.tsx"],"names":["styleInline","padding","bgColor","backgroundColor","marginTop","marginBottom","DefaultComponent","className","style","Component","PropertyForContentData","contentData","displayOption","isInEditMode","window","isEditMode","_getClassName","contentType","join","isInContentArea","contentLink","id","name","renderComponentData","React","componentsLazyList","typeName","component","lazy","existedComponent","find","com","includes","componentType","console","warn","keyNotFound","Math","random","renderNotFound","renderContentArea","property","propertyDataType","contentarea","expandedValue","map","contentId","baseUrl","prepareUrl","url","baseHeader","prepareRequest","mode","headers","header","language","location","pathname","split","prepareRequestHeader","getDataByContentIdAsync","blockId","request","fetch","response","json","jsonData","getDataByContentUrlAsync","pageUrl","length","data","error","incrementAsync","createAsyncThunk","amount","contentApiSlice","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","existedDataIndex","findIndex","m","push","store","configureStore","reducer","contentBlock","CommonRootComponent","useState","blockData","setBlockData","useEffect","anyWindow","globalThis","top","hash","then","root","container","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.chunk.js?v=39b6422b","sourcesContent":["import {\r\n  Component,\r\n  CSSProperties,\r\n} from 'react';\r\n\r\nconst styleInline = {\r\n  // color: \"red\",\r\n  padding: \"20px\",\r\n  bgColor: \"red\",\r\n  backgroundColor: \"red\",\r\n  marginTop: \"10px\",\r\n  marginBottom: \"20px\",\r\n} as CSSProperties;\r\nclass DefaultComponent extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"block\" style={styleInline}>\r\n        <p>No component found</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default DefaultComponent;\r\n","import {\r\n    DisplayOption,\r\n    IContentDataBase,\r\n} from '../models/base-common-model';\r\nimport { renderComponentData } from '../utils/component-renderer';\r\n\r\nexport function PropertyForContentData(contentData: IContentDataBase, displayOption: DisplayOption | null = null) {\r\n    const isInEditMode = window.isEditMode;\r\n    function _getClassName(contentData: IContentDataBase) {\r\n        return `${contentData?.contentType?.join(' ')} ${displayOption?.displayOption}`;\r\n    }\r\n    return (\r\n        <div className=\"content-item\">\r\n            {contentData\r\n                && (isInEditMode && displayOption?.isInContentArea\r\n                    ? (<div className={_getClassName(contentData)}\r\n                        data-contentgroup=\"\"\r\n                        data-epi-block-id={contentData?.contentLink?.id}\r\n                        data-epi-block-info=\"{&quot;missingrenderer&quot;:false}\"\r\n                        data-epi-content-name={contentData.name}>\r\n                        {renderComponentData(contentData)}\r\n                    </div>)\r\n                    : renderComponentData(contentData))}\r\n        </div>)\r\n}","import React from 'react';\r\n\r\nimport {\r\n    ContentAreaItem,\r\n    IContentDataBase,\r\n    IContentDataStateBase,\r\n} from '../models/base-common-model';\r\nimport { PropertyForContentData } from './content-data-component';\r\n\r\nclass ContentAreaItemComponent extends React.Component<ContentAreaItem, IContentDataStateBase> {\r\n    constructor(props: ContentAreaItem) {\r\n        super(props);\r\n        this.state = { blockId: props.contentLink.id };\r\n    }\r\n    _getClassName(contentData: IContentDataBase) {\r\n        return `${contentData?.contentType?.join(' ')} col-12`;\r\n    }\r\n    render() {\r\n        const { expandedValue } = this.props;\r\n        return (\r\n            <div className={this._getClassName(expandedValue)}>\r\n                {expandedValue && PropertyForContentData(expandedValue, { isInContentArea: true })}\r\n            </div>)\r\n    }\r\n\r\n}\r\nexport default (ContentAreaItemComponent);","import { lazy } from 'react';\r\n\r\nexport declare interface ComponentParseModel {\r\n    typeName: string[];\r\n    component: any;\r\n}\r\nconst initLazyComponentsList = () => {\r\n    let componentsList = [\r\n        { typeName: [\"HeroBlock\"], component: lazy(() => import(\"../blocks/HeroBlock/hero-block\")) },\r\n        { typeName: [\"HomePage\"], component: lazy(() => import(\"../pages/home-page/home-page-component\")) },\r\n        { typeName: [\"HeroBlockCallout\", \"Callout\"], component: lazy(() => import(\"../blocks/CalloutBlock/callout-block\")) },\r\n    ];\r\n    return componentsList as Array<ComponentParseModel>;\r\n};\r\nvar componentsLazyList = initLazyComponentsList();\r\n\r\nexport { componentsLazyList };\r\n","import DefaultComponent from '../blocks/DefaultComponent/default-component';\r\nimport ContentAreaItemComponent from '../HOCs/content-area-item';\r\nimport { PropertyForContentData } from '../HOCs/content-data-component';\r\nimport {\r\n    ContentArea,\r\n    ContentAreaItem,\r\n    IContentDataBase,\r\n} from '../models/base-common-model';\r\nimport { PropertyData } from '../models/property-data-model';\r\nimport { componentsLazyList } from './componentRegister';\r\n\r\nconst renderNotFound = () => {\r\n    var keyNotFound = `${Math.random()} ${Math.random()}`;\r\n    return <DefaultComponent key={keyNotFound}></DefaultComponent>;\r\n};\r\n// new\r\nconst renderComponentData = (contentData: IContentDataBase) => {\r\n    let existedComponent = componentsLazyList.find((com) => com.typeName.includes(contentData.componentType));\r\n    let Component = existedComponent?.component;\r\n    if (!Component) {\r\n        console.warn('no component found', contentData)\r\n        return renderNotFound();\r\n    }\r\n    return <Component {...contentData}></Component>\r\n};\r\n\r\nconst renderContentArea = (property: PropertyData, isInEditMode = false) => {\r\n    if (property.propertyDataType !== 'PropertyContentArea') {\r\n        return (<></>);\r\n    }\r\n    const contentarea = property as ContentArea;\r\n    return contentarea.expandedValue.map((component) => {\r\n        return (\r\n            <div key={component.contentId}>\r\n                {component && PropertyForContentData(component, { isInContentArea: true })}\r\n            </div>)\r\n    }\r\n    );\r\n};\r\nconst renderContentAreaItem = (contentAreaItem: ContentAreaItem, isInEditMode = false) => {\r\n    return <ContentAreaItemComponent key={contentAreaItem.contentLink.id} {...contentAreaItem}></ContentAreaItemComponent>;\r\n};\r\n\r\nexport {\r\n    renderComponentData,\r\n    renderContentArea,\r\n    renderContentAreaItem,\r\n    renderNotFound,\r\n};\r\n","import { IContentDataBase } from '../../models/base-common-model';\r\n\r\nconst baseUrl = '/api/episerver/v3.0/content/';\r\nconst prepareUrl = (url: string) => {\r\n    if (url.includes('?')) {\r\n        return `${url}&expand=*`;\r\n    }\r\n    return `${url}?expand=*`;\r\n}\r\n\r\nconst baseHeader = { 'content-type': 'application/json' } as HeadersInit;\r\nconst prepareRequestHeader = (header: HeadersInit) => {\r\n    const language = window.location.pathname.split('/')[0];\r\n    return { ...header, 'accept-language': language } as HeadersInit;\r\n}\r\n\r\nconst prepareRequest = (): RequestInit => {\r\n    const header = prepareRequestHeader(baseHeader);\r\n    return { mode: 'no-cors', headers: header } as RequestInit;\r\n}\r\n\r\nexport const getDataByContentIdAsync = async (blockId: number): Promise<IContentDataBase | null> => {\r\n    // return fakeGetData(blockId);\r\n    const url = prepareUrl(`${baseUrl}${blockId}`);\r\n    const request = prepareRequest();\r\n\r\n    const response = await fetch(url, request);\r\n    if (response) {\r\n        const jsonData = await response.json();\r\n        return jsonData as IContentDataBase;\r\n    }\r\n    return null as unknown as IContentDataBase;\r\n}\r\n\r\nexport const getDataByContentUrlAsync = async (pageUrl: string): Promise<IContentDataBase | null> => {\r\n    const url = prepareUrl(`${baseUrl}?contentUrl=${pageUrl}`);\r\n    const request = prepareRequest();\r\n    try {\r\n        const response = await fetch(url, request);\r\n        if (response) {\r\n            const jsonData = await response.json();\r\n            if (jsonData.length) {\r\n                const data = jsonData[0] as IContentDataBase;\r\n\r\n                return data;\r\n\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return null as unknown as IContentDataBase;\r\n}\r\n// \r\nexport const fetchDataAsyncXHR = (blockId: number) => {\r\n    new Promise(r => {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.onload = (response) => {\r\n            console.warn('fetch data ok', response);\r\n            r(response)\r\n        }\r\n        xhr.onerror = (response) => {\r\n            console.warn('fetch data err', response);\r\n        }\r\n        xhr.open('get', `https://localhost:44397/api/episerver/v3.0/content/${blockId}`);\r\n        xhr.send();\r\n    })\r\n\r\n}\r\n","import {\r\n    createAsyncThunk,\r\n    createSlice,\r\n} from '@reduxjs/toolkit';\r\n\r\nimport { RootState } from '../../app/store';\r\nimport { IContentDataBase } from '../../models/base-common-model';\r\nimport { getDataByContentIdAsync } from './content-api';\r\n\r\nexport interface BlockComponent {\r\n    parentId?: number;\r\n    data: IContentDataBase[]\r\n}\r\nconst initialState: BlockComponent = {\r\n    data: []\r\n}\r\n\r\nexport const incrementAsync = createAsyncThunk(\r\n    'counter/fetchBlock',\r\n    async (amount: number) => {\r\n        console.warn('herer', amount)\r\n        const response = await getDataByContentIdAsync(amount);\r\n        return response;\r\n    }\r\n);\r\n\r\nexport const contentApiSlice = createSlice({\r\n    name: 'contentapi',\r\n    initialState,\r\n    reducers: {\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(incrementAsync.fulfilled, (state, action) => {\r\n                console.warn('init state ', action)\r\n                if (action?.payload?.contentLink?.id) {\r\n                    const existedDataIndex = state.data.findIndex(m => m.contentLink.id === action?.payload?.contentLink.id);\r\n                    if (existedDataIndex > -1) {\r\n                        state.data[existedDataIndex] = action.payload;\r\n                    } else {\r\n                        state.data.push(action.payload);\r\n                    }\r\n                }\r\n\r\n            })\r\n    },\r\n});\r\n\r\nexport const contentareaSelector = (state: RootState) => state.contentBlock.data[0];\r\nexport const contentareaSelectorNew = (blockId: number) => (state: RootState) => state.contentBlock.data.find(m => m.contentLink.id == blockId) as unknown as IContentDataBase;\r\n\r\nexport default contentApiSlice.reducer;\r\n","import {\r\n    Action,\r\n    configureStore,\r\n    ThunkAction,\r\n} from '@reduxjs/toolkit';\r\n\r\nimport contentApiSlice from '../blocks/ContainerBlock/contentarea-slice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        contentBlock: contentApiSlice,\r\n    },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    RootState,\r\n    unknown,\r\n    Action<string>\r\n>;\r\n","import {\r\n    useEffect,\r\n    useState,\r\n} from 'react';\r\n\r\nimport {\r\n    getDataByContentIdAsync,\r\n    getDataByContentUrlAsync,\r\n} from './blocks/ContainerBlock/content-api';\r\nimport { IContentDataBase } from './models/base-common-model';\r\nimport { renderComponentData } from './utils/component-renderer';\r\n\r\n// page layout\r\nfunction CommonRootComponent() {\r\n    const [blockData, setBlockData] = useState(null as unknown as IContentDataBase);\r\n\r\n    useEffect(() => {\r\n        const anyWindow = globalThis as any\r\n\r\n        if (anyWindow.isInEditMode) {\r\n            window.isEditMode = true;\r\n            const contentId = anyWindow.top.location.hash.split('epi.cms.contentdata:///')[1].split('&')[0] as number;\r\n            getDataByContentIdAsync(contentId).then((data) => {\r\n                setBlockData(data as IContentDataBase);\r\n            })\r\n        } else {\r\n            window.isEditMode = false;\r\n            getDataByContentUrlAsync(window.location.pathname).then((data) => {\r\n                setBlockData(data as IContentDataBase);\r\n            })\r\n        }\r\n\r\n    }, [])\r\n    return (\r\n\r\n        <div className=\"container\">\r\n            {blockData && renderComponentData(blockData)}\r\n        </div>\r\n    );\r\n}\r\nexport default CommonRootComponent;\r\n","import './global-style.css';\r\n\r\nimport React from 'react';\r\n\r\nimport { createRoot } from 'react-dom/client';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './app/store';\r\nimport CommonRootComponent from './common-root-component';\r\n\r\nwindow.isEditMode = true;\r\nwindow.root = [];\r\n\r\n\r\nconst container = document.getElementById(\"root\");\r\nconst root = createRoot(container!); // createRoot(container!) if you use TypeScript\r\n\r\nconst component = (\r\n    <Provider store={store}>\r\n        <CommonRootComponent />\r\n    </Provider>\r\n\r\n);\r\nroot.render(component);\r\n"],"sourceRoot":""}